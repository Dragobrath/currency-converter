Currency Converter 1.0.0-BETA
Author: Anton Dubov

1. Installation:
	1) Make sure that you have installed Java 7, Maven (tested with version 3.1.1) and Apache Tomcat (tested with version 7.0.40)
	2) Open terminal in this folder and run "mvn clean install".
	3) Deploy target/currencyconverter-*.war file to Tomcat.
	
	With default configuration web-application should be accessible via url http://localhost:8080/currencyconverter/
	
2. Adding new data feed sources:
	1) Configuration:
		First look up file src/main/resources/dataFeedSources.xml. This is a configuration file for all data feed sources.
		Open it and add new DataFeedSource. Choose convenient id and display name. You can enable or disable data source by setting "enabled"-property to true or false.
		Provide service url with open date-parameter at the end. Example: http://www.example.org/feed?parameter1=value1&parameter2=value2&date=
		It's important to leave equation sign at the end because date itself will be concatenated to the end of the url-string.
		Provide required by the web-service date format.
	
	2) Implement DataFeedSourceClient interface.
		Service bean must be named exactly like data source id. Example: Configuration file: <id>eestipank</id>, Client annotation: @Repository("eestipank")
		Purpose of a client class is to get data feed from specific source and map it to common model: DataFeed.
		Check ee.finestmedia.currencyconverter.client.impl package for example implementations.
		
		Client services may use convenient parsers to get feeds in different formats like xml, csv or html. Currently only xml-parser is implemented.
		Parsers could be accessed from ParserFactory which returns desired parser by given data format.
		Parser beans should be named accordingly. To get "xmlParser" call parserFactory.getParser("xml").
		
		XmlParser uses JAXB to unmarshal xml-feeds using classes generated from xds-schemas. New schemas could be added to src/main/resources/xsd folder.
		Make sure to pass correct response Class to XmlParser. 

3. Other implementation details:

	1) Caching.
		All responses from Clients are cached by DataFeedService. I used Spring annotations with Ehcache.
		Keys are generated by SpEL-expression CustomKeyGeneratorUtil.SPEL_EXPRESSION_GENERATE_KEY_FOR_FEED_BY_DATE_CACHE
		It takes data source id and concatenates it with current date in dd-MM-YYYY.
		(!) Beware, CustomKeyGeneratorUtil and DataFeedService are tightly coupled. If you change one class, mind the other!
	
	2) Converter service.
		Service has two functions:
		Getting list of all currencies available for conversion and converting currencies.
		First service reads configuration from dataFeedSources.xml and iterates over each source to get data feed.
		Then feeds are combined in UnifiedDataFeed object and returned for convenient use.
		
	3) Internationalization.
		Currently only two languages are supported: estonian and english.
		Translations are located in folder src/main/resources/translations
		messages_en.properties is the main translation file.
		If locale is set to estonian, but messages_ee.properties doesn't have required translation key, substitute from messages_en.properties will be taken.
		It doesn't work vice versa.
		
4. In the next version will be implemented:

	1) Unit tests coverage
	2) UI error messages